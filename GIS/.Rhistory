) +  geom_sf(data = PA_16 , fill = NA , lwd=1.2) +
labs(title = "2020 Election Results by Precinct") +
theme_minimal()
PA_16_prec_win <- results_2020_Intersection %>% mutate(
percentD = (G20PREDBID / (G20PREDBID +G20PRERTRU  )) - .5,
precentR = (G20PRERTRU / (G20PREDBID +G20PRERTRU  )) - .5,
Winner = case_when(
G20PREDBID > G20PRERTRU ~ "D",
G20PREDBID < G20PRERTRU ~ "R",
TRUE ~ "T"
)
)
ggplot(PA_16_prec_win, aes(fill = percentD)) +
geom_sf() +
scale_fill_gradient2(
low = "red",           # Color for Republican wins
mid = "pink",         # Neutral color for ties or near-zero margins
high = "blue",         # Color for Democratic wins
midpoint = 0,          # Zero-centered gradient
name = "Margin of Victory"
) +  geom_sf(data = PA_16 , fill = NA , lwd=1.2) +
labs(title = "2020 Election Results by Precinct") +
theme_minimal()
results_2020_Intersection <- (results_2020[sf::st_intersection(results_2020$geometry,PA_16$geometry, sparse=FALSE, ])
results_2020_Intersection <- (results_2020[sf::st_intersect(results_2020$geometry,PA_16$geometry, sparse=FALSE, ])
results_2020_Intersection <- (results_2020[sf::st_intersection(results_2020$geometry,PA_16$geometry), ])
head(results_2020_Intersection)
results_2020_Intersection <- (results_2020[sf::st_intersection(results_2020$geometry,PA_16$geometry), ])
results_2020_Intersection <- results_2020_Intersection[sf::within(
st_transform(st_centroid(results_2020_Intersection$geometry), st_crs(PA_16))
,PA_16$geometry,sparse=FALSE)]
results_2020_Intersection <- (results_2020[sf::st_intersection(results_2020$geometry,PA_16$geometry), ])
results_2020_Intersection <- results_2020_Intersection[sf::st_within(
st_transform(st_centroid(results_2020_Intersection$geometry), st_crs(PA_16))
,PA_16$geometry,sparse=FALSE)]
# Ensure both geometries are in the same CRS
results_2020_Intersection <- st_transform(results_2020_Intersection, st_crs(PA_16))
# Calculate the centroids of the precincts
centroids <- st_centroid(results_2020_Intersection$geometry)
# Check if centroids are within PA_16
within_pa16 <- st_within(centroids, PA_16$geometry, sparse = FALSE)
# Subset results_2020_Intersection based on the within result
results_2020_Intersection <- results_2020_Intersection[within_pa16, ]
ggplot(PA_16_prec_win, aes(fill = percentD)) +
geom_sf() +
scale_fill_gradient2(
low = "red",           # Color for Republican wins
mid = "pink",         # Neutral color for ties or near-zero margins
high = "blue",         # Color for Democratic wins
midpoint = 0,          # Zero-centered gradient
name = "Margin of Victory"
) +  geom_sf(data = PA_16 , fill = NA , lwd=1.2) +
labs(title = "2020 Election Results by Precinct") +
theme_minimal()
PA_16_prec_win <- results_2020_Intersection %>% mutate(
percentD = (G20PREDBID / (G20PREDBID +G20PRERTRU  )) - .5,
precentR = (G20PRERTRU / (G20PREDBID +G20PRERTRU  )) - .5,
Winner = case_when(
G20PREDBID > G20PRERTRU ~ "D",
G20PREDBID < G20PRERTRU ~ "R",
TRUE ~ "T"
)
)
ggplot(PA_16_prec_win, aes(fill = percentD)) +
geom_sf() +
scale_fill_gradient2(
low = "red",           # Color for Republican wins
mid = "pink",         # Neutral color for ties or near-zero margins
high = "blue",         # Color for Democratic wins
midpoint = 0,          # Zero-centered gradient
name = "Margin of Victory"
) +  geom_sf(data = PA_16 , fill = NA , lwd=1.2) +
labs(title = "2020 Election Results by Precinct") +
theme_minimal()
ggplot(PA_16_prec_win) +
geom_sf() +
geom_sf(data = PA_16 , fill = NA , lwd=1.2) +
labs(title = "2020 Election Results by Precinct") +
theme_minimal()
library(sf)
library(dplyr)
library(ggplot2)
setwd("C:\\Users\\lukem\\OneDrive\\Documents\\year4\\R\\GIS")
pa_congdst_sf <- sf::st_read("./pa_cong_adopted_2022/carter_boundaries.shp")
nrow(pa_congdst_sf)
head(pa_congdst_sf)
PA_16 <- pa_congdst_sf[pa_congdst_sf$DISTRICT == 16, ]
print(PA_16)
ggplot(pa_congdst_sf) +
geom_sf() +
labs(title = "PA Congressional Districts")
ggplot(PA_16) +
geom_sf() +
labs(title = "PA Congressional District 16")
pa_16_precinct <- sf::st_read("./pa_sldl_adopted_2022/2022 LRC-House-Final.shp")
#nrow(pa_16_precinct)
head(pa_16_precinct)
ggplot(pa_16_precinct) +
geom_sf() +
labs(title = "PA State districts")
PA_16_precinct_Intersection <- (pa_16_precinct[sf::st_intersects(PA_16$geometr,pa_16_precinct$geometry, sparse = FALSE), ])
#PA_16_precinct_Intersection
ggplot(PA_16_precinct_Intersection) +
geom_sf() +
geom_sf(data = PA_16 , fill = NA , lwd=1.2)
labs(title = "PA State districts")
results_2020 <- sf::st_read("./pa_vest_20/pa_vest_20.shp")
#nrow(pa_16_precinct)
head(results_2020)
results_2020$geometry[1]
PA_16$geomet
PA_16$geometry <- st_make_valid(PA_16$geometry)
results_2020$geometry <- st_make_valid(results_2020$geometry)
results_2020$geometry[1]
sf::st_intersects(PA_16$geometr,results_2020$geometry[1], sparse=FALSE)
results_2020_Intersection <- (results_2020[sf::st_intersection(results_2020$geometry,PA_16$geometry), ])
head(results_2020_Intersection)
# Ensure both geometries are in the same CRS
results_2020_Intersection <- st_transform(results_2020_Intersection, st_crs(PA_16))
# Calculate the centroids of the precincts
centroids <- st_centroid(results_2020_Intersection$geometry)
# Check if centroids are within PA_16
within_pa16 <- st_within(centroids, PA_16$geometry, sparse = FALSE)
# Subset results_2020_Intersection based on the within result
results_2020_Intersection <- results_2020_Intersection[within_pa16, ]
PA_16_prec_win <- results_2020_Intersection %>% mutate(
percentD = (G20PREDBID / (G20PREDBID +G20PRERTRU  )) - .5,
precentR = (G20PRERTRU / (G20PREDBID +G20PRERTRU  )) - .5,
Winner = case_when(
G20PREDBID > G20PRERTRU ~ "D",
G20PREDBID < G20PRERTRU ~ "R",
TRUE ~ "T"
)
)
ggplot(PA_16_prec_win, aes(fill = percentD)) +
geom_sf() +
scale_fill_gradient2(
low = "red",           # Color for Republican wins
mid = "pink",         # Neutral color for ties or near-zero margins
high = "blue",         # Color for Democratic wins
midpoint = 0,          # Zero-centered gradient
name = "Margin of Victory"
) +  geom_sf(data = PA_16 , fill = NA , lwd=1.2) +
labs(title = "2020 Election Results by Precinct") +
theme_minimal()
ggplot(PA_16_prec_win) +
geom_sf() +
geom_sf(data = PA_16 , fill = NA , lwd=1.2) +
labs(title = "2020 Election Results by Precinct") +
theme_minimal()
ggplot(PA_16_prec_win) +
geom_sf() +
geom_sf(data = PA_16 , fill = NA , lwd=1.2) +
labs(title = "PA16 Precincts") +
theme_minimal()
ggplot(results_2020) +
geom_sf() +
geom_sf(data = PA_16 , fill = NA , lwd=1.2) +
labs(title = "PA Precincts") +
theme_minimal()
ggplot(PA_16_prec_win, aes(fill = percentD)) +
geom_sf() +
scale_fill_gradient2(
low = "red",           # Color for Republican wins
mid = "pink",         # Neutral color for ties or near-zero margins
high = "blue",         # Color for Democratic wins
midpoint = 0,          # Zero-centered gradient
name = "Margin of Victory as % of votes for Democrat "
) +  geom_sf(data = PA_16 , fill = NA , lwd=1.2) +
labs(title = "2020 Election Results by Precinct") +
theme_minimal()
ggplot(PA_16_prec_win, aes(fill = percentD)) +
geom_sf() +
scale_fill_gradient2(
low = "red",           # Color for Republican wins
mid = "pink",         # Neutral color for ties or near-zero margins
high = "blue",         # Color for Democratic wins
midpoint = 0,          # Zero-centered gradient
name = "Margin of Victory \n % of votes for Democrat "
) +  geom_sf(data = PA_16 , fill = NA , lwd=1.2) +
labs(title = "2020 Election Results by Precinct") +
theme_minimal()
ggplot(PA_16_prec_win, aes(fill = percentD)) +
geom_sf() +
scale_fill_gradient2(
low = "red",           # Color for Republican wins
mid = "pink",         # Neutral color for ties or near-zero margins
high = "blue",         # Color for Democratic wins
midpoint = 0,          # Zero-centered gradient
name = "Margin of Victory \n Percent of votes for Democrat "
) +  geom_sf(data = PA_16 , fill = NA , lwd=1.2) +
labs(title = "2020 Election Results by Precinct") +
theme_minimal()
ggplot(PA_16_prec_win, aes(fill = percentD)) +
geom_sf() +
scale_fill_gradient2(
low = "red",           # Color for Republican wins
mid = "pink",         # Neutral color for ties or near-zero margins
high = "blue",         # Color for Democratic wins
midpoint = 0,          # Zero-centered gradient
name = "Margin of Victory \nPercent of votes for Democrat "
) +  geom_sf(data = PA_16 , fill = NA , lwd=1.2) +
labs(title = "2020 Election Results by Precinct") +
theme_minimal()
results_2020_win <- results_2020 %>% mutate(
percentD = (G20PREDBID / (G20PREDBID +G20PRERTRU  )) - .5,
precentR = (G20PRERTRU / (G20PREDBID +G20PRERTRU  )) - .5,
Winner = case_when(
G20PREDBID > G20PRERTRU ~ "D",
G20PREDBID < G20PRERTRU ~ "R",
TRUE ~ "T"
)
)
ggplot(results_2020_win, aes(fill = percentD)) +
geom_sf() +
scale_fill_gradient2(
low = "red",           # Color for Republican wins
mid = "pink",         # Neutral color for ties or near-zero margins
high = "blue",         # Color for Democratic wins
midpoint = 0,          # Zero-centered gradient
name = "Margin of Victory \nPercent of votes for Democrat "
) +  geom_sf(data = PA_16 , fill = NA , lwd=1.2) +
labs(title = "2020 Election Results by Precinct") +
theme_minimal()
head(PA_16_prec_win)
sum(PA_16_prec_win$G20PREDBID)
sum(PA_16_prec_win$G20PREDBID)
sum(PA_16_prec_win$G20PREDTRU)
sum(PA_16_prec_win$G20PREDBID)
head(PA_16_prec_win)
sum(PA_16_prec_win$G20PREDBID)
sum(PA_16_prec_win$G20PRERTRU)
b<-sum(PA_16_prec_win$G20PREDBID)
t<-sum(PA_16_prec_win$G20PRERTRU)
o <- sum(PA_16_prec_win$G20PRELJOR)
t - b
t/(b+t+o)
b<-sum(PA_16_prec_win$G20PREDBID)
t<-sum(PA_16_prec_win$G20PRERTRU)
o <- sum(PA_16_prec_win$G20PRELJOR)
t - b
t/(b+t)
b<-sum(PA_16_prec_win$G20PREDBID)
t<-sum(PA_16_prec_win$G20PRERTRU)
o <- sum(PA_16_prec_win$G20PRELJOR)
t - b
t/(b+t+o)
library(sf)
library(dplyr)
library(ggplot2)
library(sf)
library(dplyr)
library(ggplot2)
setwd("C:\\Users\\lukem\\OneDrive\\Documents\\year4\\R\\GIS")
pa_congdst_sf <- sf::st_read("./pa_cong_adopted_2022/carter_boundaries.shp")
nrow(pa_congdst_sf)
head(pa_congdst_sf)
PA_16 <- pa_congdst_sf[pa_congdst_sf$DISTRICT == 16, ]
print(PA_16)
options(repr.plot.width = 10, repr.plot.height = 8)
ggplot(pa_congdst_sf) +
geom_sf() +
labs(title = "PA Congressional Districts")
options(repr.plot.width = 20, repr.plot.height = 8)
ggplot(pa_congdst_sf) +
geom_sf() +
labs(title = "PA Congressional Districts")
library(sf)
library(dplyr)
library(ggplot2)
setwd("C:\\Users\\lukem\\OneDrive\\Documents\\year4\\R\\GIS")
pa_congdst_sf <- sf::st_read("./pa_cong_adopted_2022/carter_boundaries.shp")
nrow(pa_congdst_sf)
head(pa_congdst_sf)
PA_16 <- pa_congdst_sf[pa_congdst_sf$DISTRICT == 16, ]
print(PA_16)
ggplot(pa_congdst_sf) +
geom_sf() +
labs(title = "PA Congressional Districts")
library(sf)
library(dplyr)
library(ggplot2)
setwd("C:\\Users\\lukem\\OneDrive\\Documents\\year4\\R\\GIS")
pa_congdst_sf <- sf::st_read("./pa_cong_adopted_2022/carter_boundaries.shp")
nrow(pa_congdst_sf)
head(pa_congdst_sf)
PA_16 <- pa_congdst_sf[pa_congdst_sf$DISTRICT == 16, ]
print(PA_16)
ggplot(pa_congdst_sf) +
geom_sf() +
labs(title = "PA Congressional Districts")
ggplot(PA_16) +
geom_sf() +
labs(title = "PA Congressional District 16")
pa_16_precinct <- sf::st_read("./pa_sldl_adopted_2022/2022 LRC-House-Final.shp")
#nrow(pa_16_precinct)
head(pa_16_precinct)
ggplot(pa_16_precinct) +
geom_sf() +
labs(title = "PA State districts")
PA_16_precinct_Intersection <- (pa_16_precinct[sf::st_intersects(PA_16$geometr,pa_16_precinct$geometry, sparse = FALSE), ])
#PA_16_precinct_Intersection
ggplot(PA_16_precinct_Intersection) +
geom_sf() +
geom_sf(data = PA_16 , fill = NA , lwd=1.2)
labs(title = "PA State districts")
results_2020 <- sf::st_read("./pa_vest_20/pa_vest_20.shp")
#nrow(pa_16_precinct)
head(results_2020)
results_2020$geometry[1]
PA_16$geomet
PA_16$geometry <- st_make_valid(PA_16$geometry)
results_2020$geometry <- st_make_valid(results_2020$geometry)
results_2020$geometry[1]
sf::st_intersects(PA_16$geometr,results_2020$geometry[1], sparse=FALSE)
results_2020_Intersection <- (results_2020[sf::st_intersection(results_2020$geometry,PA_16$geometry), ])
View(results_2020)
head(results_2020_Intersection)
# Ensure both geometries are in the same CRS
results_2020_Intersection <- st_transform(results_2020_Intersection, st_crs(PA_16))
# Calculate the centroids of the precincts
centroids <- st_centroid(results_2020_Intersection$geometry)
# Check if centroids are within PA_16
within_pa16 <- st_within(centroids, PA_16$geometry, sparse = FALSE)
# Subset results_2020_Intersection based on the within result
results_2020_Intersection <- results_2020_Intersection[within_pa16, ]
PA_16_prec_win <- results_2020_Intersection %>% mutate(
percentD = (G20PREDBID / (G20PREDBID +G20PRERTRU  )) - .5,
precentR = (G20PRERTRU / (G20PREDBID +G20PRERTRU  )) - .5,
Winner = case_when(
G20PREDBID > G20PRERTRU ~ "D",
G20PREDBID < G20PRERTRU ~ "R",
TRUE ~ "T"
)
)
ggplot(PA_16_prec_win, aes(fill = percentD)) +
geom_sf() +
scale_fill_gradient2(
low = "red",           # Color for Republican wins
mid = "pink",         # Neutral color for ties or near-zero margins
high = "blue",         # Color for Democratic wins
midpoint = 0,          # Zero-centered gradient
name = "Margin of Victory \nPercent of votes for Democrat "
) +  geom_sf(data = PA_16 , fill = NA , lwd=1.2) +
labs(title = "2020 Election Results by Precinct") +
theme_minimal()
ggplot(PA_16_prec_win) +
geom_sf() +
geom_sf(data = PA_16 , fill = NA , lwd=1.2) +
labs(title = "PA16 Precincts") +
theme_minimal()
ggplot(results_2020) +
geom_sf() +
geom_sf(data = PA_16 , fill = NA , lwd=1.2) +
labs(title = "PA Precincts") +
theme_minimal()
results_2020_win <- results_2020 %>% mutate(
percentD = (G20PREDBID / (G20PREDBID +G20PRERTRU  )) - .5,
precentR = (G20PRERTRU / (G20PREDBID +G20PRERTRU  )) - .5,
Winner = case_when(
G20PREDBID > G20PRERTRU ~ "D",
G20PREDBID < G20PRERTRU ~ "R",
TRUE ~ "T"
)
)
ggplot(results_2020_win, aes(fill = percentD)) +
geom_sf() +
scale_fill_gradient2(
low = "red",           # Color for Republican wins
mid = "pink",         # Neutral color for ties or near-zero margins
high = "blue",         # Color for Democratic wins
midpoint = 0,          # Zero-centered gradient
name = "Margin of Victory \nPercent of votes for Democrat "
) +  geom_sf(data = PA_16 , fill = NA , lwd=1.2) +
labs(title = "2020 Election Results by Precinct") +
theme_minimal()
b<-sum(PA_16_prec_win$G20PREDBID)
t<-sum(PA_16_prec_win$G20PRERTRU)
o <- sum(PA_16_prec_win$G20PRELJOR)
t - b
t/(b+t+o)
View(pa_congdst_sf)
pa_congdst_sf <- pa_congdst_sf %>% arrange(district)
pa_congdst_sf <- pa_congdst_sf %>% arrange(DISTRICT)
ggplot(pa_congdst_sf) +
geom_sf() +
labs(title = "PA Congressional Districts")
View(pa_congdst_sf)
View(pa_congdst_sf)
color_key <- data.frame(
DISTRICT = 1:17,
Color = c("Red", "Blue", "Blue", "Blue", "Blue", "Blue", "Blue", "Blue",
"Red", "Red", "Red", "Blue", "Red", "Red", "Red", "Red", "Blue")
)
pa_congdst_sf <- pa_congdst_sf %>%
left_join(color_key, by = "DISTRICT")
color_key <- data.frame(
DISTRICT = as.character(1:17),
Color = c("Red", "Blue", "Blue", "Blue", "Blue", "Blue", "Blue", "Blue",
"Red", "Red", "Red", "Blue", "Red", "Red", "Red", "Red", "Blue")
)
pa_congdst_sf <- pa_congdst_sf %>%
left_join(color_key, by = "DISTRICT")
ggplot(pa_congdst_sf) +
geom_sf(aes(fill = Color)) +  # Use the Color column for fill
scale_fill_manual(values = c("Red" = "red", "Blue" = "blue")) +  # Map Red and Blue to their respective colors
labs(
title = "PA Congressional Districts",
fill = "Party"  # Legend title
) +
theme_minimal()
color_key <- data.frame(
DISTRICT = as.character(1:17),  # Ensure type matches
Color = c("#e57373", "#64b5f6", "#64b5f6", "#64b5f6", "#64b5f6", "#64b5f6", "#64b5f6", "#64b5f6",
"#e57373", "#e57373", "#e57373", "#64b5f6", "#e57373", "#e57373", "#e57373", "#e57373", "#64b5f6")  # Muted red and blue
)
# Merge color key with the spatial dataframe
pa_congdst_sf <- pa_congdst_sf %>%
left_join(color_key, by = "DISTRICT")
# Plot with thicker borders and muted colors
ggplot(pa_congdst_sf) +
geom_sf(aes(fill = Color), color = "black", size = 0.7) +  # Thicker borders with black color
scale_fill_identity() +  # Use the Color column directly for fill
labs(
title = "PA Congressional Districts",
fill = "Party"
) +
theme_minimal() +
theme(
panel.grid = element_blank(),  # Remove background grid lines
panel.background = element_rect(fill = "white"),  # White background
plot.title = element_text(size = 16, face = "bold")  # Larger, bold title
)
color_key <- data.frame(
DISTRICT = as.character(1:17),
Color = c("Red", "Blue", "Blue", "Blue", "Blue", "Blue", "Blue", "Blue",
"Red", "Red", "Red", "Blue", "Red", "Red", "Red", "Red", "Blue")
)
pa_congdst_sf <- pa_congdst_sf %>%
left_join(color_key, by = "DISTRICT")
ggplot(pa_congdst_sf) +
geom_sf(aes(fill = Color)) +  # Use the Color column for fill
scale_fill_manual(values = c("Red" = "#e57373", "Blue" = "#64b5f6")) +  # Map Red and Blue to their respective colors
labs(
title = "PA Congressional Districts",
fill = "Party"  # Legend title
) +
theme_minimal()
color_key <- data.frame(
DISTRICT = as.character(1:17),
Color = c("Red", "Blue", "Blue", "Blue", "Blue", "Blue", "Blue", "Blue",
"Red", "Red", "Red", "Blue", "Red", "Red", "Red", "Red", "Blue")
)
pa_congdst_sf <- pa_congdst_sf %>%
left_join(color_key, by = "DISTRICT")
ggplot(pa_congdst_sf) +
geom_sf(aes(fill = Color), color = "black", size = 0.7)+
geom_sf(aes(fill = Color)) +  # Use the Color column for fill
scale_fill_manual(values = c("Red" = "#e57373", "Blue" = "#64b5f6")) +  # Map Red and Blue to their respective colors
labs(
title = "PA Congressional Districts",
fill = "Party"  # Legend title
) +
theme_minimal()
ggplot(results_2020_win, aes(fill = percentD) , lwd = 1.2) +
geom_sf() +
scale_fill_gradient2(
low = "red",           # Color for Republican wins
mid = "pink",         # Neutral color for ties or near-zero margins
high = "blue",         # Color for Democratic wins
midpoint = 0,          # Zero-centered gradient
name = "Margin of Victory \nPercent of votes for Democrat "
) +  geom_sf(data = PA_16 , fill = NA , lwd=1.2) +
labs(title = "2020 Election Results by Precinct") +
theme_minimal()
ggplot(results_2020_win, aes(fill = percentD) +
geom_sf() +
scale_fill_gradient2(
low = "red",           # Color for Republican wins
mid = "pink",         # Neutral color for ties or near-zero margins
high = "blue",         # Color for Democratic wins
midpoint = 0,          # Zero-centered gradient
name = "Margin of Victory \nPercent of votes for Democrat "
) +  geom_sf(data = PA_16 , fill = NA , lwd=1.2) +
labs(title = "2020 Election Results by Precinct") +
theme_minimal()
ggplot(results_2020_win, aes(fill = percentD)) +
geom_sf() +
scale_fill_gradient2(
low = "red",           # Color for Republican wins
mid = "pink",         # Neutral color for ties or near-zero margins
high = "blue",         # Color for Democratic wins
midpoint = 0,          # Zero-centered gradient
name = "Margin of Victory \nPercent of votes for Democrat "
) +  geom_sf(data = PA_16 , fill = NA , lwd=1.2) +
labs(title = "2020 Election Results by Precinct") +
theme_minimal()
color_key <- data.frame(
DISTRICT = as.character(1:17),
Color = c("Red", "Blue", "Blue", "Blue", "Blue", "Blue", "Blue", "Blue",
"Red", "Red", "Red", "Blue", "Red", "Red", "Red", "Red", "Blue")
)
pa_congdst_sf <- pa_congdst_sf %>%
left_join(color_key, by = "DISTRICT")
ggplot(pa_congdst_sf) +
geom_sf(aes(fill = Color)) +  # Use the Color column for fill
scale_fill_manual(values = c("Red" = "#e57373", "Blue" = "#64b5f6")) +  # Map Red and Blue to their respective colors
labs(
title = "PA Congressional Districts",
fill = "Party"  # Legend title
) +
theme_minimal()
